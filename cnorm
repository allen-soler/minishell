# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    cnorm                                              :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: allespag <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/02/05 16:58:47 by allespag          #+#    #+#              #
#    Updated: 2019/02/06 17:43:12 by jallen           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#!/bin/bash

function norm()
{
	if [[ ! -e $1 ]]; then
		printf "${YELLOW}Warning${NC}: %s: Not a valid file\n" $1 >> warning.log
		return -1
	fi
	if [[ ! -e "norm.log" ]]; then
		printf "${GREEN}creating norm.log...${NC}\n"
	fi
	norminette $1 > norm.log
	while read line
	do
		if [[ $line == Error* ]]; then
			if [[ $old == Norme:* ]]; then
				printf "\r\033[K"
				printf "\n${RED}%s${NC}\n" $old
			fi
			((ERROR++))
			printf "$line\n"
		elif [[ $line == Warning:* ]]; then
			tmp_old=`echo $old | awk '{print $2}'`
			printf "${YELLOW}Warning${NC}: %s: Not a valid file\n" $tmp_old >> warning.log
		elif [[ $line == Norme:* ]]; then
			printf "%s" $line
			sleep 0.099
			printf "\r\033[K"
		fi
		old=$line
	done < norm.log
}

function display_error()
{
	if [[ -e "warning.log" ]]; then
		if [[ "$ERROR" -ne 0 ]]; then
			echo ''
		fi
		if [[ "$SILENT" -eq 0 ]]; then
			cat warning.log
		fi
		WARNING=`cat warning.log | wc -l | bc`
	fi
	if [[ "$ERROR" -eq 0 ]]; then
		COLOR_E="$GREEN"
	else
		COLOR_E="$RED"
	fi
	if [[ "$WARNING" -eq 0 ]]; then
		COLOR_W="$GREEN"
	else
		COLOR_W="${YELLOW}"
	fi
	printf "\nYou have ${COLOR_E}%d${NC} error(s) and ${COLOR_W}%d${NC} warning(s)" $ERROR $WARNING
	if [ "$ERROR" -eq 0 ] && [ "$WARNING" -eq 0 ]; then
		printf " ! Good job !"
	else
		printf "... Good luck..."
	fi
	echo ''
	rm -f warning.log
}

function get_flag()
{
	if [[ $1 == -s ]]; then
		return 1
	elif [[ $1 == -* ]]; then
		printf "cnorm: illegal option -- %s\n" ${1:1:1}
		exit
	fi
	return 0
}

function exit_script()
{
	echo ''
	if [[ -e "warning.log" ]]; then
		printf "${RED}SIGINT: removing warning.log...${NC}\n"
		rm -f warning.log
	fi
	if [[ -e "norm.log" ]]; then
		printf "${RED}SIGINT: removing norm.log...${NC}\n"
		rm -f norm.log
	fi
	trap - SIGINT 2> /dev/null		# clear the trap
	kill -- -$$ 2> /dev/null		# Sends SIGINT to child/sub processes
}

###
# Main body of script starts here
###

trap exit_script SIGINT

IFS=$'\n'
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m'


ERROR=0
WARNING=0

get_flag $1
SILENT=$?
if [[ "$#" -eq 0 ]] || ([[ "$#" -eq 1 ]] && [[ "$SILENT" -eq 1 ]]); then
	printf "cnorm: usage: [-s] [file ...]\n"
else
	clear
	if [[ "$SILENT" -eq 1 ]]; then
		shift
	fi
	while [[ "$#" -ne 0 ]]
	do
		norm $1 $ERROR
		shift
	done
	display_error $ERROR $SILENT
	if [[ -e "norm.log" ]]; then
		printf "${RED}removing norm.log...${NC}\n"
		rm -f norm.log
	fi
fi
